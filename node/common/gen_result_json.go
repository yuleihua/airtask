// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package common

import (
	"encoding/json"
	"errors"

	"airman.com/airfk/pkg/common/hexutil"
)

var _ = (*resultMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r Result) MarshalJSON() ([]byte, error) {
	type Result struct {
		ID        int64         `json:"id"          gencodec:"required"`
		BeginTime int64         `json:"begin_time"  gencodec:"required"`
		EndTime   int64         `json:"end_time"    gencodec:"required"`
		ErrorMsg  string        `json:"error"       gencodec:"required"`
		Extra     hexutil.Bytes `json:"output"`
	}
	var enc Result
	enc.ID = r.ID
	enc.BeginTime = r.BeginTime
	enc.EndTime = r.EndTime
	enc.ErrorMsg = r.ErrorMsg
	enc.Extra = r.Extra
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *Result) UnmarshalJSON(input []byte) error {
	type Result struct {
		ID        *int64         `json:"id"          gencodec:"required"`
		BeginTime *int64         `json:"begin_time"  gencodec:"required"`
		EndTime   *int64         `json:"end_time"    gencodec:"required"`
		ErrorMsg  *string        `json:"error"       gencodec:"required"`
		Extra     *hexutil.Bytes `json:"output"`
	}
	var dec Result
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ID == nil {
		return errors.New("missing required field 'id' for Result")
	}
	r.ID = *dec.ID
	if dec.BeginTime == nil {
		return errors.New("missing required field 'begin_time' for Result")
	}
	r.BeginTime = *dec.BeginTime
	if dec.EndTime == nil {
		return errors.New("missing required field 'end_time' for Result")
	}
	r.EndTime = *dec.EndTime
	if dec.ErrorMsg == nil {
		return errors.New("missing required field 'error' for Result")
	}
	r.ErrorMsg = *dec.ErrorMsg
	if dec.Extra != nil {
		r.Extra = *dec.Extra
	}
	return nil
}
