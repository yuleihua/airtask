// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package common

import (
	"encoding/json"
	"errors"

	"airman.com/airfk/pkg/common/hexutil"
)

var _ = (*jobMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (j Job) MarshalJSON() ([]byte, error) {
	type Job struct {
		Name      string        `json:"name"     gencodec:"required"`
		Type      JobType       `json:"type"`
		UUID      ItemID        `json:"uuid"`
		Retry     int           `json:"retry"    gencodec:"required"`
		Interval  int           `json:"interval" gencodec:"required"`
		AddTime   int64         `json:"add_time"`
		LimitTime int64         `json:"limit_time"`
		Extra     hexutil.Bytes `json:"extra"`
	}
	var enc Job
	enc.Name = j.Name
	enc.Type = j.Type
	enc.UUID = j.UUID
	enc.Retry = j.Retry
	enc.Interval = j.Interval
	enc.AddTime = j.AddTime
	enc.LimitTime = j.LimitTime
	enc.Extra = j.Extra
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (j *Job) UnmarshalJSON(input []byte) error {
	type Job struct {
		Name      *string        `json:"name"     gencodec:"required"`
		Type      *JobType       `json:"type"`
		UUID      *ItemID        `json:"uuid"`
		Retry     *int           `json:"retry"    gencodec:"required"`
		Interval  *int           `json:"interval" gencodec:"required"`
		AddTime   *int64         `json:"add_time"`
		LimitTime *int64         `json:"limit_time"`
		Extra     *hexutil.Bytes `json:"extra"`
	}
	var dec Job
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Name == nil {
		return errors.New("missing required field 'name' for Job")
	}
	j.Name = *dec.Name
	if dec.Type != nil {
		j.Type = *dec.Type
	}
	if dec.UUID != nil {
		j.UUID = *dec.UUID
	}
	if dec.Retry == nil {
		return errors.New("missing required field 'retry' for Job")
	}
	j.Retry = *dec.Retry
	if dec.Interval == nil {
		return errors.New("missing required field 'interval' for Job")
	}
	j.Interval = *dec.Interval
	if dec.AddTime != nil {
		j.AddTime = *dec.AddTime
	}
	if dec.LimitTime != nil {
		j.LimitTime = *dec.LimitTime
	}
	if dec.Extra != nil {
		j.Extra = *dec.Extra
	}
	return nil
}
